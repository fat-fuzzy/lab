.l\:reveal > button {
	position: relative;
	z-index: var(--z-index-layer);
	width: 100%;
}

.l\:reveal > button > .icon {
	border: 0;
	clip: rect(0 0 0 0);
	height: auto;
	margin: 0;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

// Fixes bug in Safari where .content overflows parent width
.l\:reveal.show {
	display: flex;
	flex-direction: column;
	height: 100%;
}

.l\:reveal.show .content {
	position: relative;
	top: calc(var(--gap) / 2); // TODO : Fix magic denominator
	z-index: var(--z-index-reveal);
	width: 100%;
	max-height: 35vh;
	overflow: auto;
}

.l\:reveal.minimize:not([class*='fixed']) .content {
	border: 0;
	clip: rect(0 0 0 0);
	height: auto;
	margin: 0;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

.l\:reveal .end {
	justify-self: flex-end;
}
// TODO: set [inline/block] size according to alignment

@media screen and (min-width: 320px) {
	.l\:reveal.bp\:xxs.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}

@media screen and (min-width: 620px) {
	.l\:reveal.bp\:xs.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}

// TODO fix magic bp
@media screen and (min-width: 935px) {
	// The reveal layout inside a sidebar is currently only used for sidebar menus:
	// - reveal mechanism serves to hide and show the menu on mobile
	// - reveal is not necessary on desktop, so on desktop we unset the reveal layout
	// Constraining this allows usage of reveal layout in desktop, outside a sidebar context
	// TODO: consider creating a specific menu layout that does this without coupling sidebar + reveal layouts
	[class^='l:side'] > .l\:reveal {
		&.minimize:not([class*='fixed']) .content {
			border: unset;
			clip: unset;
			padding: var(--current-size);
			white-space: normal;
			overflow: hidden;
			position: unset;
			top: 0;
			width: 100%;
			margin: initial;
		}
		&.minimize[class*='fixed'] {
			left: calc(var(--current-side-size) * -1 + calc(var(--gap) * 3));
			overflow: hidden;
		}
		&:not([class*='fixed']) > button {
			display: none;
		}

		&:not([class*='fixed']) > button + * {
			margin-top: 0;
		}
	}
	.l\:reveal.show .content {
		top: 0;
		max-height: unset;
	}

	// TODO: Clean this magic stuff
	.l\:reveal[class*='fixed'],
	.l\:reveal.show[class*='fixed'] {
		--current-side-size: var(--sidebar-width-xs);
		--current-gap: calc(var(--gap) * 4.35);
		position: fixed;
		width: var(--current-side-size);
		top: var(--current-gap);
	}

	.l\:reveal[class*='fixed'].show .content {
		top: var(--gap);
		max-height: calc(100vh - 2 * var(--current-gap));
		overflow: auto;
	}
	// TODO: Decouple sidebar layout from sidebar content
	.l\:side.minimize {
		--current-gap: calc(var(--gap) * 2);
		flex-basis: var(--current-gap);
	}
}

@media screen and (min-width: 935px) {
	.l\:reveal.bp\:sm.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}

@media screen and (min-width: 1360px) {
	.l\:reveal.bp\:md.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}

@media screen and (min-width: 1620px) {
	.l\:reveal.bp\:lg.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}

@media screen and (min-width: 2048px) {
	.l\:reveal.bp\:xl.l\:stack:only-child {
		inline-size: calc(var(--current-side-size) - 2 * var(--gap));
	}
}
