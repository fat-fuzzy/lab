//== SCALE

//== UNITS

// Remove the unit of a value
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

@function calcUnitlessValue($font-size) {
	$unitless_value: strip-unit($font-size);
	$remSize: $unitless_value / 16;
	@return #{$remSize};
}

// /* REM mixin : produces REM values with px fallback
// * Use this in conjunction with body{font-size:10px;} for base 10 conversion
@mixin pix2rem($size) {
	font-size: ($size); //Fallback in px
	font-size: calcUnitlessValue($size) + rem;
}

// /* EM mixin : produces EM values with px fallback
// * Use this in conjunction with body{font-size:10px;} for base 10 conversion
@mixin pix2em($size) {
	font-size: ($size); //Fallback in px
	font-size: calcUnitlessValue($size) + em;
}

//== WIDTHS & HEIGHTS

@mixin calcWidth($width, $multiple, $margin: false) {
	@if $margin == false and map-has-key($theme-layout, $width) {
		$width-value: map-get($theme-layout, $width);

		width: calc(#{$width-value} * #{$multiple});
	}
	@if map-has-key($theme-layout, $width) and map-has-key($theme-layout, $margin) {
		$width-value: map-get($theme-layout, $width);
		$margin-value: map-get($theme-layout, $margin);

		width: calc(#{$width-value} * #{$multiple} - #{$margin-value});
	} @else {
		@if (map-has-key($theme-layout, $width) == false) {
			@warn 'Invalid width value: #{$width}.';
		}

		@if (map-has-key($theme-layout, $margin) == false) {
			@warn 'Invalid margin value: #{$margin}.';
		}
	}
}

//== BUTTONS
// $prefix: '-';
// @include generate-button-styles($prefix);
@mixin generate-button-styles($prefix) {
	$theme-brightness: (
		'brightness-day': 'day',
		'brightness-night': 'night',
	);
	$theme-contrast: (
		'contrast-blend': 'blend',
		'contrast-contrast': 'contrast',
	);
	$theme-colors: (
		'color-primary': 'primary',
		'color-accent': 'accent',
		'color-highlight': 'highlight',
	);
	$button-variants: (
		'variant-fill': 'fill',
		'variant-outline': 'outline',
		'variant-bare': 'bare',
	);
	button {
		color: var(--current-button-text);
		background-color: var(--current-button-bg);
		border: var(--border-width) solid var(--current-button-border);
	}
	@each $brightness, $brightness-value in $theme-brightness {
		// Generate buttons for [Brightness = day/night]
		.#{$brightness-value} {
			// Generate default buttons for [Brightness = day/night]
			@each $variant, $variant-value in $button-variants {
				button.#{$variant-value} {
					--current-button-text: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-text
					);
					--current-button-bg: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-bg
					);
					--current-button-border: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-border
					);
				}
				button.#{$variant-value}:hover {
					--current-button-text: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-text-hover
					);
					--current-button-bg: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-bg-hover
					);
					--current-button-border: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-border-hover
					);
				}
				button.#{$variant-value}:active {
					--current-button-border: var(
						#{$prefix}-#{$brightness-value}-color-button-default-#{$variant-value}-border-active
					);
				}
			}
			@each $contrast, $contrast-value in $theme-contrast {
				// Generate buttons for [Contrast = contrast/blend]
				.bg\:#{$contrast-value} {
					// Generate styles for [Variant = bare]
					button.bare {
						--current-button-border: var(
							#{$prefix}-#{$brightness-value}-#{$contrast-value}-color-button-bare-border
						);
					}
					// Generate default buttons hover state
					button:hover {
						--current-button-bg: var(
							#{$prefix}-#{$brightness-value}-#{$contrast-value}-color-button-default-hover-bg
						);
					}
				}
			}
		}
		// Generate colored buttons for [Variant = fill/outline/bare]
		@each $color, $color-value in $theme-colors {
			@each $variant, $variant-value in $button-variants {
				button.#{$color-value}.#{$variant-value} {
					--current-button-text: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-text
					);
					--current-button-bg: var(#{$prefix}-color-button-#{$color-value}-#{$variant-value}-bg);
					--current-button-border: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-border
					);
				}
				button.#{$color-value}.#{$variant-value}:hover {
					--current-button-text: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-text-hover
					);
					--current-button-bg: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-bg-hover
					);
					--current-button-border: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-border-hover
					);
				}
				button.#{$color-value}.#{$variant-value}:active {
					--current-button-border: var(
						#{$prefix}-color-button-#{$color-value}-#{$variant-value}-border-active
					);
				}
			}
		}

		// == Overrides: [Brightness = night]
		.night {
			// Generate colored buttons for [Variant = fill/outline/bare]
			@each $color, $color-value in $theme-colors {
				button.outline.#{$color-value},
				button.bare.#{$color-value} {
					--current-button-text: var(#{$prefix}-night-color-button-outline-text);
				}
			}
			button.outline:hover,
			button.bare:hover {
				--current-button-text: var(#{$prefix}-color-dark);
			}
		}
		// == Overrides:  [Brightness = day]
		.day {
			button.highlight.outline {
				--current-button-text: var(#{$prefix}-day-color-button-highlight-outline-text);
			}
			button.highlight.bare {
				--current-button-text: var(#{$prefix}-day-color-button-highlight-bare-text);
			}
		}
	}
}

//== FLEX

@mixin wrap-space-between() {
	flex-wrap: wrap;
	justify-content: space-between;
}

//== MEDIA QUERIES

@mixin min-and-max-width($min, $max) {
	@if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
		$min-value: map-get($breakpoints, $min);
		$max-value: map-get($breakpoints, $max);
		@media screen and (min-width: '#{$min-value}px') and  (max-width: '#{$max-value}px') {
			@content;
		}
	} @else {
		@if (map-has-key($breakpoints, $min) == false) {
			@warn 'Invalid breakpoint min value: #{$min}.';
		}

		@if (map-has-key($breakpoints, $max) == false) {
			@warn 'Invalid breakpoint max value: #{$max}.';
		}
	}
}

@mixin min-aspect-ratio($aspect-ratio) {
	@if map-has-key($theme-layout, $aspect-ratio) {
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (min-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

@mixin max-aspect-ratio($aspect-ratio) {
	@if map-has-key($theme-layout, $aspect-ratio) {
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (max-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

@mixin min-aspect-ratio-min-width($aspect-ratio, $breakpoint) {
	@if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (min-width: #{$breakpoint-value}) and (min-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($breakpoints, $breakpoint) == false) {
			@warn 'Invalid breakpoint: #{$breakpoint}.';
		}
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

@mixin min-aspect-ratio-max-width($aspect-ratio, $breakpoint) {
	@if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (max-width: #{$breakpoint-value}) and (min-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($breakpoints, $breakpoint) == false) {
			@warn 'Invalid breakpoint: #{$breakpoint}.';
		}
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

@mixin max-aspect-ratio-min-width($aspect-ratio, $breakpoint) {
	@if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (min-width: #{$breakpoint-value}) and (max-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($breakpoints, $breakpoint) == false) {
			@warn 'Invalid breakpoint: #{$breakpoint}.';
		}
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

@mixin max-aspect-ratio-max-width($aspect-ratio, $breakpoint) {
	@if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
		@media screen and (max-width: #{$breakpoint-value}) and (max-aspect-ratio: #{$aspect-ratio-value}) {
			@content;
		}
	} @else {
		@if (map-has-key($breakpoints, $breakpoint) == false) {
			@warn 'Invalid breakpoint: #{$breakpoint}.';
		}
		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
		}
	}
}

// @mixin aspect-ratio($aspect-ratio) {
// 	@if map-has-key($theme-layout, $aspect-ratio) {
// 		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
// 		@media screen and (aspect-ratio: #{$aspect-ratio-value}) {
// 			@content;
// 		}
// 	} @else {
// 		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
// 			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
// 		}
// 	}
// }

// @mixin aspect-ratio-min-width($aspect-ratio, $breakpoint) {
// 	@if map-has-key($theme-layout, $aspect-ratio) and map-has-key($breakpoints, $breakpoint) {
// 		$breakpoint-value: map-get($breakpoints, $breakpoint);
// 		$aspect-ratio-value: map-get($theme-layout, $aspect-ratio);
// 		@media screen and (min-width: #{$breakpoint-value}) and (aspect-ratio: #{$aspect-ratio-value}) {
// 			@content;
// 		}
// 	} @else {
// 		@if (map-has-key($breakpoints, $breakpoint) == false) {
// 			@warn 'Invalid breakpoint: #{$breakpoint}.';
// 		}
// 		@if (map-has-key($theme-layout, $aspect-ratio) == false) {
// 			@warn 'Invalid apect-ratio: #{$aspect-ratio}.';
// 		}
// 	}
// }

// @mixin orientation-min-width($orientation, $breakpoint) {
// 	@if map-has-key($theme-layout, $orientation) and map-has-key($breakpoints, $breakpoint) {
// 		$breakpoint-value: map-get($breakpoints, $breakpoint);
// 		$orientation-value: map-get($theme-layout, $orientation);
// 		@media screen and (min-width: #{$breakpoint-value}) and (orientation: #{$orientation-value}) {
// 			@content;
// 		}
// 	} @else {
// 		@if (map-has-key($breakpoints, $breakpoint) == false) {
// 			@warn 'Invalid breakpoint: #{$breakpoint}.';
// 		}
// 		@if (map-has-key($theme-layout, $orientation) == false) {
// 			@warn 'Invalid apect-ratio: #{$orientation}.';
// 		}
// 	}
// }
