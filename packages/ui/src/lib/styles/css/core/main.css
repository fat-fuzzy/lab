@charset "UTF-8";
/* Global config */
/* Global config */
/**
* source : https://github.com/hankchizljaw/modern-css-reset/blob/master/src/reset.css
**/
/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd,
menu {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
menu[role=group],
ul[role=group],
li[role=group] {
  list-style: none;
  padding: 0;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.debug[class^="l:"] {
  outline: var(--border-width-lg) dotted var(--current-accent);
  background-color: var(--current-accent-lighter);
}

/* Resets and global styles, set --current-* CSS var values used in layouts and blocks*/
/* Theme */
:root {
  font-family: var(--font-family-body);
}

body {
  --current-size: var(--s0);
  --current-size-plus: var(--s1);
  --current-size-side: var(--s0);
  color: var(--current-color);
  background: var(--current-bg-color);
  font-size: var(--font-size-body);
  font-weight: var(--font-weight-body);
  line-height: var(--line-height-body);
}

a {
  color: var(--current-primary);
  font-size: var(--font-size-ui);
  font-family: var(--font-family-ui);
  font-weight: var(--font-weight-ui);
}

a[class^="font:"] {
  color: var(--current-font-size);
}

a:hover {
  cursor: pointer;
  text-decoration: underline;
}

:focus {
  outline: var(--outline-width) dotted var(--current-color);
  outline-offset: var(--outline-offset);
}

.xxs,
[class*=":xxs"]:not(.bp\:xxs) {
  --current-size-minus: var(--size-xxs);
  --current-size: var(--size-xxs);
  --current-size-plus: var(--size-sm);
  --current-size-inverse: var(--size-inverse-xxs);
  --current-font-size: var(--font-size-xxs);
  --current-font-size-minus: calc(var(--font-size-xxs) / var(--fluid-min-ratio));
  --current-font-size-plus: var(--font-size-sm);
  --current-side-size: var(--sidebar-width-xxs);
}

.xs,
[class*=":xs"]:not(.bp\:xs) {
  --current-size-minus: var(--size-xxs);
  --current-size: var(--size-xs);
  --current-size-plus: var(--size-md);
  --current-size-inverse: var(--size-inverse-xs);
  --current-font-size: var(--font-size-xs);
  --current-font-size-minus: calc(var(--font-size-xxs) / var(--fluid-min-ratio));
  --current-font-size-plus: var(--font-size-md);
  --current-side-size: var(--sidebar-width-xs);
}

.sm,
[class*=":sm"]:not(.bp\:sm) {
  --current-size-minus: var(--size-xs);
  --current-size: var(--size-sm);
  --current-size-plus: var(--size-lg);
  --current-size-inverse: var(--size-inverse-sm);
  --current-font-size: var(--font-size-sm);
  --current-font-size-minus: var(--font-size-xxs);
  --current-font-size-plus: var(--font-size-lg);
  --current-side-size: var(--sidebar-width-sm);
}

.md,
[class*=":md"]:not(.bp\:md) {
  --current-size-minus: var(--size-sm);
  --current-size: var(--size-md);
  --current-size-plus: var(--size-xl);
  --current-size-inverse: var(--size-inverse-md);
  --current-font-size: var(--font-size-md);
  --current-font-size-minus: var(--font-size-xs);
  --current-font-size-plus: var(--font-size-xl);
  --current-side-size: var(--sidebar-width-md);
}

.lg,
[class*=":lg"]:not(.bp\:lg) {
  --current-size-minus: var(--size-md);
  --current-size: var(--size-lg);
  --current-size-plus: var(--size-xxl);
  --current-size-inverse: var(--size-inverse-lg);
  --current-font-size: var(--font-size-lg);
  --current-font-size-minus: var(--font-size-sm);
  --current-font-size-plus: var(--font-size-xxl);
  --current-side-size: var(--sidebar-width-lg);
}

.xl,
[class*=":xl"]:not(.bp\:xl) {
  --current-size-minus: var(--size-lg);
  --current-size: var(--size-xl);
  --current-size-plus: var(--size-xxl);
  --current-size-inverse: var(--size-inverse-xl);
  --current-font-size: var(--font-size-xl);
  --current-font-size-minus: var(--font-size-md);
  --current-font-size-plus: calc(var(--font-size-xxl) * var(--fluid-min-ratio));
  --current-side-size: var(--sidebar-width-xl);
}

.xxl,
[class*=":xxl"]:not(.bp\:xxl) {
  --current-size-minus: var(--size-xl);
  --current-size: var(--size-xxl);
  --current-size-plus: var(--size-xxl);
  --current-size-inverse: var(--size-inverse-xxl);
  --current-font-size: var(--font-size-xxl);
  --current-font-size-minus: var(--font-size-xl);
  --current-font-size-plus: calc(var(--font-size-xxl) * var(--fluid-min-ratio));
  --current-side-size: var(--sidebar-width-xxl);
}

.bp\:xxs {
  --current-bp-size: var(--bp-xxs);
}

.bp\:xs {
  --current-bp-size: var(--bp-xs);
}

.bp\:sm {
  --current-bp-size: var(--bp-sm);
}

.bp\:md {
  --current-bp-size: var(--bp-md);
}

.bp\:lg {
  --current-bp-size: var(--bp-lg);
}

.bp\:xl {
  --current-bp-size: var(--bp-xl);
}

.bp\:xxl {
  --current-bp-size: var(--bp-xxl);
}

body {
  --current-size: var(--s0);
  --current-size-plus: var(--s1);
  --current-size-side: var(--sidebar-width-sm);
  --current-primary: var(--color-gray-5);
  --current-shadow: var(--shadow);
}

.day {
  --current-bg-color: var(--color-light);
  --current-bg-contrast: var(--color-white);
  --current-polar: var(--color-white);
  --current-gray: var(--color-gray-1);
  --current-gray-contrast: var(--color-gray-2);
  --current-color: var(--color-dark);
  --current-color-contrast: var(--color-light);
  --current-primary: var(--color-primary);
  --current-primary-light: var(--color-primary-light);
  --current-primary-lighter: var(--color-primary-lighter);
  --current-primary-lightest: var(--color-primary-lightest);
  --current-accent: var(--color-accent);
  --current-accent-light: var(--color-accent-light);
  --current-accent-lighter: var(--color-accent-lighter);
  --current-highlight-dark: var(--color-highlight-dark);
  --current-highlight: var(--color-highlight);
  --current-highlight-light: var(--color-highlight-light);
  --current-highlight-lighter: var(--color-highlight-lighter);
  --current-danger: var(--color-danger);
  --current-shadow: var(--shadow);
  color: var(--current-color);
  background-color: var(--current-bg-color);
}

.night {
  --current-bg-color: var(--color-dark);
  --current-bg-contrast: var(--current-gray);
  --current-polar: var(--color-dark);
  --current-gray: var(--color-gray-5);
  --current-gray-contrast: var(--color-gray-4);
  --current-color: var(--color-light);
  --current-color-contrast: var(--color-dark);
  --current-primary: var(--color-primary-light);
  --current-primary-light: var(--color-primary-lighter);
  --current-primary-lighter: var(--color-primary-lightest);
  --current-primary-lightest: var(--color-primary-lightest);
  --current-accent: var(--color-accent);
  --current-accent-light: var(--color-accent-light);
  --current-accent-lighter: var(--color-accent-lighter);
  --current-highlight-dark: var(--color-highlight);
  --current-highlight: var(--color-highlight);
  --current-highlight-light: var(--color-highlight-light);
  --current-highlight-lighter: var(--color-highlight-lighter);
  --current-danger: var(--color-danger-light);
  --current-shadow: var(--shadow-light);
  color: var(--current-color);
  background-color: var(--current-bg-color);
}

.day pre {
  color: var(--color-light);
}

.hint {
  color: var(--current-hint);
}

.hint:focus {
  outline-color: var(--current-hint);
}

.hint:hover {
  background-color: var(--current-hint);
}

.info {
  color: var(--current-info);
}

.info:focus {
  outline-color: var(--current-info);
}

.success {
  color: var(--current-success);
}

.success:focus {
  outline-color: var(--current-success);
}

.warning {
  color: var(--current-warning);
}

.warning:focus {
  outline-color: var(--current-warning);
}

.error {
  color: var(--current-danger);
}

.error:focus {
  outline-color: var(--current-error);
}

.l\:frame {
  background-color: var(--color-white);
}

form,
.l\:text {
  color: var(--current-color);
  background-color: var(--current-bg-color);
}

a {
  color: var(--current-color);
}

a:visited {
  color: var(--current-color);
  text-decoration-color: var(--current-color);
}

a:hover {
  color: var(--color-light);
  background-color: var(--current-primary);
  text-decoration-color: var(--current-primary);
}

.bg\:accent a {
  color: var(--color-light);
}

.bg\:accent\:light a {
  color: var(--color-dark);
}

.bg\:accent\:lighter a {
  color: var(--current-accent);
}

.bg\:accent a:visited {
  color: var(--color-light);
  text-decoration-color: var(--color-light);
}

.bg\:accent\:light a:visited {
  color: var(--color-dark);
  text-decoration-color: var(--color-dark);
}

.bg\:accent\:lighter a:visited {
  color: var(--color-accent);
  text-decoration-color: var(--current-accent);
}

.bg\:accent a:hover,
.bg\:accent\:light a:hover,
.bg\:accent\:lighter a:hover {
  color: var(--current-accent);
  background-color: var(--color-light);
  text-decoration-color: var(--current-accent);
}

.bg\:accent a:focus,
.bg\:accent\:light a:focus {
  outline-color: var(--color-light);
}

.bg\:accent\:lighter a:focus {
  outline-color: var(--current-accent);
}

.bg\:highlight a,
.bg\:highlight\:light a,
.bg\:highlight\:lighter a {
  color: var(--current-highlight-dark);
}

.bg\:highlight a:visited,
.bg\:highlight\:light a:visited,
.bg\:highlight\:lighter a:visited {
  color: var(--current-color);
  text-decoration-color: var(--current-highlight-dark);
}

.bg\:highlight a:hover,
.bg\:highlight\:light a:hover,
.bg\:highlight\:lighter a:hover {
  color: var(--color-light);
  background-color: inherit;
  text-decoration-color: var(--current-dark);
}

.bg\:highlight a:focus,
.bg\:highlight\:light a:focus,
.bg\:highlighter\:light a:focus {
  outline-color: var(--current-highlight-dark);
}

.primary:focus {
  outline-color: var(--current-primary);
}

.accent:focus {
  outline-color: var(--current-accent);
}

.highlight:focus {
  outline-color: var(--current-highlight);
}

.night .header-app {
  --current-color: var(--color-light);
  color: var(--current-color);
  background-color: var(--current-gray);
}

.day .header-app {
  --current-color: var(--current-primary);
  color: var(--current-color);
  background-color: var(--current-bg-color);
}

menu {
  background-color: inherit;
}

.polar {
  background-color: var(--current-polar);
}

.bg\:primary {
  --current-color: var(--color-light);
  color: var(--current-color);
  background-color: var(--current-primary);
}

.bg\:primary\:light {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-primary-light);
}

.bg\:primary\:lighter {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-primary-lighter);
}

.bg\:primary\:lightest {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-primary-lightest);
}

.bg\:accent {
  --current-color: var(--color-light);
  color: var(--color-light);
  background-color: var(--current-accent);
}

.bg\:accent\:light {
  --current-color: var(--color-dark);
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}

.bg\:accent\:lighter {
  --current-color: var(--color-dark);
  color: var(--color-dark);
  background-color: var(--current-accent-lighter);
}

.bg\:highlight {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-highlight);
}

.bg\:highlight\:light {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-highlight-light);
}

.bg\:highlight\:lighter {
  --current-color: var(--color-dark);
  color: var(--current-color);
  background-color: var(--current-highlight-lighter);
}

[class*=box],
[class*=dotted] {
  --current-border-color: var(--current-gray-contrast);
}

[class*=box] {
  border: var(--border-width) solid var(--current-border-color);
}

[class*=dotted] {
  border: var(--border-width-lg) dotted var(--current-border-color);
}

.box\:primary,
.dotted\:primary {
  --current-border-color: var(--current-primary);
}

.box\:primary\:light,
.dotted\:primary\:light {
  --current-border-color: var(--current-primary-light);
}

.box\:primary\:lighter,
.dotted\:primary\:lighter {
  --current-border-color: var(--current-primary-lighter);
}

.box\:accent,
.dotted\:accent {
  --current-border-color: var(--current-accent);
}

.box\:accent\:light,
.dotted\:accent\:light {
  --current-border-color: var(--current-accent-light);
}

.box\:accent\:lighter,
.dotted\:accent\:lighter {
  --current-border-color: var(--current-accent-lighter);
}

.box\:highlight,
.dotted\:highlight {
  --current-border-color: var(--current-highlight-dark);
}

.box\:highlight\:light,
.dotted\:highlight\:light {
  --current-border-color: var(--current-highlight);
}

.box\:highlight\:lighter,
.dotted\:highlight\:lighter {
  --current-border-color: var(--current-highlight-light);
}

h1,
h2,
h3 {
  line-height: var(--line-height-heading);
  margin-block-end: var(--gap);
}

h1.link,
h2.link,
h3.link {
  margin: 0;
}

h1 {
  font-size: var(--font-size-h1);
  font-family: var(--font-family-h1);
  font-weight: var(--font-weight-h1);
}

h2 {
  font-size: var(--font-size-h2);
  font-family: var(--font-family-h2);
  font-weight: var(--font-weight-h2);
}

h3 {
  font-size: var(--font-size-h3);
  font-family: var(--font-family-h3);
  font-weight: var(--font-weight-h3);
}

h4 {
  font-size: var(--font-size-h4);
  font-family: var(--font-family-h4);
  font-weight: var(--font-weight-h4);
}

h5 {
  font-size: var(--font-size-h5);
  font-family: var(--font-family-h5);
  font-weight: var(--font-weight-h5);
}

.font\:base {
  font-size: var(--font-size-base);
}

[class*="font:"] {
  font-size: var(--current-font-size);
}

[class*="font:minus:"] {
  font-size: var(--current-font-size-minus);
}

[class*="font:plus:"] {
  font-size: var(--current-font-size-plus);
}

pre {
  font-family: var(--font-family-code);
  padding: var(--current-size-plus);
  margin: var(--current-size-plus) 0;
  border-radius: var(--radius-base);
  background-color: var(--color-gray-5);
  overflow: auto;
}

article,
.l\:text {
  background-color: inherit;
}

.day h1 {
  color: var(--current-primary);
}

.night h1 {
  color: var(--current-primary-light);
}

.emoji {
  padding: var(--font-size-base);
}

.icon.lg {
  font-size: var(--font-size-lg);
}

.layer {
  box-shadow: var(--current-shadow);
}

.inset {
  box-shadow: var(--shadow-inset);
  z-index: var(--z-index-inset);
}

.drop {
  position: relative;
  z-index: var(--z-index-inset);
}

.polar {
  background-color: var(--current-polar);
}

.night .polar {
  background-color: var(--current-bg-contrast);
}

.day.contrast {
  background-color: var(--current-bg-contrast);
}
.day.blend {
  background-color: var(--current-bg-color);
}

.night.contrast {
  background-color: var(--current-bg-color);
}
.night.blend {
  background-color: var(--current-bg-contrast);
}

/* Layout (organizational components) */
/* Layout */
/**
 * Set max line width for text:
 * - improve readability by using ch units to adapt to user zoom settings
 */
[class^="l:text"] {
  max-width: 80ch;
  padding-block-end: var(--current-size-plus);
}

[class^="l:text"] > * + h1,
[class^="l:text"] > * + h2,
[class^="l:text"] > * + h3,
[class^="l:text"] > * + h4,
[class^="l:text"] > * + h5 {
  margin-block-start: var(--s2);
}

[class^="l:text"] > h1 + *,
[class^="l:text"] > h2 + *,
[class^="l:text"] > h3 + *,
[class^="l:text"] > h4 + *,
[class^="l:text"] > h5 + * {
  margin-block-start: var(--s1);
}

[class^="l:text"] ul {
  margin-block: var(--s0);
}

.l\:text\:xxs {
  max-width: 20ch;
}

.l\:text\:xs {
  max-width: 35ch;
}

.l\:text\:sm {
  max-width: 50ch;
}

.l\:text\:md {
  max-width: 65ch;
}

.l\:text\:lg {
  max-width: 80ch;
}

.l\:text\:xl {
  max-width: 95ch;
}

.l\:text\:xxl {
  max-width: 110ch;
}

.text\:center {
  text-align: center;
}

[class*="l:stack"] > * {
  /* top and bottom margins in horizontal\:tb writing mode */
  margin-block: 0;
  inline-size: 100%;
}

[class*="l:stack"] {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.l\:stack\:auto > * {
  inline-size: auto;
}

[class*="l:stack"]:only-child {
  /* ↓ `height` in horizontal\:tb writing mode */
  block-size: 100%;
  /* ↓ `width` in horizontal\:tb writing mode */
  inline-size: 100%;
}

[class*="l:stack"].recursive * + * {
  margin-block-start: var(--current-size-plus);
}

[class*="l:stack"] > * + * {
  margin-block-start: var(--current-size-plus);
}

[class^="l:sidebar"] {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);
}

/* NOTE: The following declaration assume that the markup declares .main before .side */
[class^="l:sidebar"].start {
  flex-direction: row;
}

[class^="l:sidebar"].end {
  flex-direction: row-reverse;
}

[class^="l:sidebar"].end\:reverse {
  flex-wrap: wrap-reverse;
}

main > [class^="l:sidebar"] {
  padding: var(--gap);
}

.l\:main {
  flex-basis: 0;
  flex-grow: 999;
  min-inline-size: 70%;
}
.l\:main > main {
  block-size: 100%;
}

[class^="l:side"] {
  flex-grow: 1;
  flex-basis: var(--current-side-size);
}

[class^="l:side"].shrink {
  flex-grow: 0;
  flex-basis: fit-content;
}

[class^="l:side:"] nav {
  height: auto;
  max-height: 35vh;
  overflow-y: auto;
}

@media screen and (min-width: 935px) {
  [class^="l:side:"] nav {
    height: auto;
    max-height: unset;
  }
}
.l\:switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);
}

.l\:switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--threshold) - 100%) * 999);
}

/**
*  Use a breakpoint to force wrap into switcher layout at the breakpoint value.
* In this way, contents will wrap together as a switcher
* (instead of normal wrap where items will wrap independently of one another)
*/
[class^="l:switcher"] {
  --gap: var(--current-size-plus);
  --threshold: var(--current-bp-size);
}

.l\:switcher\:shrink > * {
  flex-grow: 0;
}

[class*="l:center"] {
  --max-width-center: calc(100% - calc(2 * var(--gap)));
  margin-left: auto;
  margin-right: auto;
}

[class*="l:center:"] {
  --max-width-center: calc(100% - calc(2 * var(--current-size-inverse)));
  max-width: var(--max-width-center);
}

[class*="l:grid"] {
  display: flex;
  flex-wrap: wrap;
}

[class*="l:grid"] {
  display: grid;
  grid-gap: var(--gap);
}

@supports (width: min(var(--current-side-size), 100%)) {
  [class*="l:grid"] {
    grid-template-columns: repeat(auto-fill, minmax(min(var(--current-side-size), 100%), 1fr));
  }
}
[class*="l:grid"] > * {
  /* needed for the flex layout fallback */
  margin-bottom: var(--gap);
}

/* We set the margins to 0 and use gap in grid */
@supports (display: grid) {
  [class*="l:grid"] > * {
    width: auto;
    margin: 0;
  }
}
.col\:center {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.max\:w\:full {
  max-width: 100%;
}

.w\:full {
  width: 100%;
}

[class*="l:burrito"] {
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 2 * var(--gap));
}

[class*="l:burrito:"] {
  max-width: var(--current-side-size);
}

[class*="l:freeze:burrito:"] {
  width: var(--current-side-size);
}

.l\:frame {
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
  max-width: 100%;
}

.l\:frame > img,
.l\:frame > video,
.l\:frame > canvas {
  inline-size: 100%;
  block-size: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}

.l\:frame\:square {
  aspect-ratio: 1/1;
}

.l\:frame\:video {
  aspect-ratio: 16/9;
}

.l\:frame\:feature {
  max-width: 100%;
}

.l\:frame\:feature > img,
.l\:frame\:feature > video,
.l\:frame\:feature > canvas {
  max-height: calc(100vh - var(--header-height) - var(--gap));
  width: auto;
  margin-left: auto;
  margin-right: auto;
  margin-block-end: var(--gap);
}

.l\:frame + * {
  margin-block-start: var(--s0);
}

[class^=card] {
  border-radius: var(--radius-base);
  padding: var(--current-size);
}

[class*="card:"] {
  padding: var(--current-size);
}

[class*="card:feature"] {
  padding-block-start: var(--gap);
}

.l\:reveal > button {
  position: relative;
  z-index: var(--z-index-layer);
  width: 100%;
}

.l\:reveal > button > .icon {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

.l\:reveal.show {
  display: flex;
  flex-direction: column;
}

.l\:reveal.show .content {
  position: relative;
  top: calc(var(--gap) / 2);
  z-index: var(--z-index-reveal);
  width: 100%;
}

.l\:reveal.minimize .content {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

.l\:reveal .end {
  justify-self: flex-end;
}

@media screen and (min-width: 320px) {
  .l\:reveal.bp\:xxs.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 768px) {
  .l\:reveal.bp\:xs.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 935px) {
  [class^="l:side"] > .l\:reveal.minimize .content {
    border: unset;
    clip: unset;
    height: auto;
    margin: initial;
    overflow: hidden;
    padding: var(--current-size);
    position: unset;
    top: 0;
    width: 100%;
    white-space: normal;
  }
  [class^="l:side"] > .l\:reveal > button {
    display: none;
  }
  [class^="l:side"] > .l\:reveal > button + * {
    margin-top: 0;
  }
}
@media screen and (min-width: 992px) {
  .l\:reveal.bp\:sm.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 1240px) {
  .l\:reveal.bp\:md.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 1620px) {
  .l\:reveal.bp\:lg.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 2048px) {
  .l\:reveal.bp\:xl.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
details {
  position: relative;
}

details.l\:stack:not([open]) {
  block-size: unset;
}

details .end {
  justify-self: flex-end;
}

@media screen and (min-width: 320px) {
  details.bp\:xxs [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:xxs.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 768px) {
  details.bp\:xs [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:xs.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 992px) {
  details.bp\:sm [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:sm.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 1240px) {
  details.bp\:md [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:md.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 1620px) {
  details.bp\:lg [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:lg.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
@media screen and (min-width: 2048px) {
  details.bp\:xl [class^="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: unset;
    overflow: hidden;
    padding: unset;
    position: unset;
    width: auto;
    white-space: normal;
  }
  details.bp\:xl.l\:stack:only-child {
    inline-size: calc(var(--current-side-size) - 2 * var(--gap));
  }
}
.sticky\:top {
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
  background-color: inherit;
  z-index: var(--z-index-sticky);
}

.sticky\:top > main {
  min-height: calc(100vh - (var(--header-height) - var(--header-margin) - var(--footer-height)));
}

@media screen and (min-width: 935px) {
  [class*=play] {
    block-size: calc(100vh - 2 * var(--header-height));
  }
  [class*=play] > .l\:sidebar {
    block-size: calc(100vh - 2 * var(--header-height));
  }
  [class*=play] > .l\:sidebar .l\:side {
    height: 100%;
    overflow: auto;
    padding-inline-start: var(--gap);
  }
  [class*=play] > .l\:sidebar .l\:main {
    height: 100%;
  }
  [class*=play] article.l\:sidebar {
    height: calc(100% - var(--header-height));
  }
  [class*=play] article [class^="l:side"] {
    height: 100%;
  }
  [class*=play] article [class^="l:side"] details {
    height: 100%;
  }
  [class*=play] article [class^="l:side"] details > [class^="l:stack"] {
    height: calc(100% - var(--header-height));
    overflow: auto;
    padding-inline-end: var(--gap);
  }
  [class*=play] .l\:frame {
    height: calc(100% - var(--header-height));
  }
}
.round,
.square {
  display: flex;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1;
}

.round,
.round > * {
  line-height: 1;
  border-radius: 50%;
}

.square,
.square > * {
  border-radius: var(--radius-base);
  aspect-ratio: 1;
}

.round .icon,
.square .icon {
  height: var(--header-icon-height);
  width: auto;
  -o-object-fit: contain;
     object-fit: contain;
}

.round.icon {
  height: var(--header-icon-height);
}

/* CSS blocks (contentful components) */
/**
 * CSS blocks
 * (= "actual content", not layout)
 * These stylesheets must use the tokens defined in `styles/app/my-app/*`
 * where  `my-app` is any folder inside `styles/app` that uses or overrides the design tokens declared in the `styles/app/ui` folder
 */
header {
  display: flex;
}

.header-page {
  align-items: baseline;
  margin-block-end: unset;
}

.header-app > .l\:main {
  min-inline-size: -moz-fit-content;
  min-inline-size: fit-content;
}

.header-app > .l\:side {
  flex-basis: content;
  position: relative;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding-left: calc(var(--gap) / 2);
  padding-right: calc(var(--gap) / 2);
}

.l\:reveal\:nav > button {
  margin: var(--current-size-plus);
  width: auto;
}

.l\:reveal\:nav .show {
  position: absolute;
  top: var(--header-height);
  z-index: var(--z-index-sticky);
  width: 100%;
  height: 35vh;
  overflow-y: auto;
}

.l\:reveal\:nav > nav > ul {
  position: relative;
  padding: var(--current-size) 0;
  margin: 0;
  height: var(--header-height);
  display: flex;
  align-items: center;
  list-style: none;
  background-size: contain;
  width: 100%;
  gap: var(--current-size);
  background-color: inherit;
}

.l\:reveal\:nav > nav li {
  position: relative;
  min-width: 100%;
  height: 100%;
  padding-inline-end: unset;
  overflow: initial;
  background-color: inherit;
}

.header-app > .l\:main > nav li[aria-current=page] a {
  color: var(--current-primary);
  text-decoration: none;
}

.header-app > .l\:main > nav li[aria-current=page]::before {
  --size: 6px;
  content: "";
  width: 0;
  height: 0;
  position: absolute;
  left: 0;
  top: calc(50% - var(--size));
  border: var(--size) solid transparent;
  border-left: var(--size) solid var(--current-primary-light);
}

.header-app > .l\:main > nav a {
  display: flex;
  height: 100%;
  align-items: center;
  padding: 0 1em;
  color: inherit;
  text-transform: uppercase;
  text-decoration: none;
  transition: color 0.2s linear;
}

.header-app ul li > a {
  font-weight: var(--font-weight-400);
}

.header-app nav a:hover {
  color: var(--current-primary-light);
}

.header-app a:hover {
  background-color: initial;
}

.header-app {
  container: header-nav/inline-size;
}

@container header-nav (min-width: 620px) {
  .l\:reveal\:nav .show {
    position: initial;
    min-inline-size: unset;
  }
  .l\:reveal\:nav > button {
    display: none;
  }
  .l\:reveal\:nav .show {
    top: 0;
    width: auto;
    max-height: unset;
    background-color: inherit;
    box-shadow: none;
  }
  .l\:reveal\:nav .show,
  .l\:reveal\:nav [class*="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: initial;
    overflow: hidden;
    padding: 0;
    position: unset;
    top: 0;
    width: 100%;
    white-space: normal;
  }
  .l\:reveal\:nav > nav > ul {
    position: relative;
    padding: 0;
    margin: 0;
    width: unset;
    height: var(--header-height);
    display: flex;
    align-items: center;
    list-style: none;
    background-size: contain;
    flex-wrap: nowrap;
    gap: var(--gap);
  }
  .l\:reveal\:nav > nav li {
    position: relative;
    padding: 0;
    margin: 0;
    min-width: unset;
    height: var(--header-height);
    display: flex;
    align-items: center;
    list-style: none;
    background-size: contain;
    flex-wrap: nowrap;
    gap: var(--gap);
  }
  .header-app > .l\:main > nav li[aria-current=page]::before {
    --size: 6px;
    content: "";
    min-width: unset;
    width: 0;
    height: 0;
    position: absolute;
    top: 0;
    left: calc(50% - var(--size));
    border: var(--size) solid transparent;
    border-top: var(--size) solid var(--current-primary-light);
  }
}
@media screen and (min-width: 620px) {
  .l\:reveal\:nav .show {
    position: initial;
    min-inline-size: unset;
  }
  .l\:reveal\:nav > button {
    display: none;
  }
  .l\:reveal\:nav .show {
    top: 0;
    width: auto;
    max-height: unset;
    background-color: inherit;
    box-shadow: none;
  }
  .l\:reveal\:nav .show,
  .l\:reveal\:nav [class*="hide:"] {
    border: unset;
    clip: unset;
    height: auto;
    margin: initial;
    overflow: hidden;
    padding: 0;
    position: unset;
    top: 0;
    width: 100%;
    white-space: normal;
  }
  .l\:reveal\:nav > nav > ul {
    position: relative;
    padding: 0;
    margin: 0;
    width: unset;
    height: var(--header-height);
    display: flex;
    align-items: center;
    list-style: none;
    background-size: contain;
    flex-wrap: nowrap;
    gap: var(--gap);
  }
  .l\:reveal\:nav > nav li {
    position: relative;
    padding: 0;
    margin: 0;
    min-width: unset;
    height: var(--header-height);
    display: flex;
    align-items: center;
    list-style: none;
    background-size: contain;
    flex-wrap: nowrap;
    gap: var(--gap);
  }
  .header-app > .l\:main > nav li[aria-current=page]::before {
    --size: 6px;
    content: "";
    min-width: unset;
    width: 0;
    height: 0;
    position: absolute;
    top: 0;
    left: calc(50% - var(--size));
    border: var(--size) solid transparent;
    border-top: var(--size) solid var(--current-primary-light);
  }
}
footer {
  text-align: center;
  padding-top: var(--size-sm);
  padding-bottom: var(--size-sm);
}

nav {
  display: flex;
}

nav ul {
  list-style: none;
  margin: 0;
  width: 100%;
  padding: 0;
}

nav li {
  width: 100%;
  max-width: calc(var(--current-side-size) - var(--outline-offset));
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 0 var(--outline-offset);
  margin-block: 0;
}

nav li a {
  max-width: 100%;
  font-size: var(--font-size-ui);
  font-weight: var(--font-weight-semibold);
  line-height: 1;
  text-overflow: ellipsis;
  overflow: hidden;
  text-decoration: none;
}

nav li a,
nav li a:visited {
  color: var(--current-color);
  font-weight: var(--font-weight-semibold);
}

nav a:hover {
  color: var(--current-primary);
}

nav a:focus {
  outline-offset: var(--outline-offset-nav);
}

ul.depth-1 {
  padding-inline-start: var(--current-size-plus);
}

ul.depth-2 {
  padding-inline-start: calc(2 * var(--current-size));
}

ul.depth-3 {
  padding-inline-start: calc(3 * var(--current-size));
}

ul.depth-4 {
  padding-inline-start: calc(4 * var(--current-size));
}

ul[class*=depth-] * + ul,
ul[class*=depth-] li:has(ul) {
  margin-block-start: var(--current-size);
}

nav li[aria-current=page] > a,
nav li[aria-current=page] > a:visited {
  color: var(--current-primary);
  font-weight: var(--font-weight-semibold);
  text-decoration: none;
  text-decoration-color: var(--current-gray);
}

ul.depth-0 > li > a {
  font-family: var(--font-family-heading);
  font-weight: var(--font-weight-semibold);
}

nav a:hover {
  background-color: initial;
}

a[class*=card] {
  text-decoration: none;
}

menu {
  display: flex;
  align-items: center;
  padding: 0;
  list-style: none;
}

.menu > p {
  font-size: var(--font-size-small);
  font-weight: var(--font-weight-ui);
}

menu > li > * {
  width: 100%;
}

menu > .round {
  margin-inline: calc(var(--gap) / 2);
}

img {
  max-width: 100%;
}

button {
  display: flex;
  justify-content: center;
  flex-wrap: nowrap;
  min-width: -moz-max-content;
  min-width: max-content;
  font-size: var(--current-font-size);
  font-family: var(--current-font-family);
  font-weight: var(--font-weight-ui);
  line-height: var(--line-height-ui);
  padding: var(--current-size) var(--current-size-plus);
  border-radius: var(--radius-base);
  color: var(--current-color);
  border: var(--border-width) solid hsl(var(--color-shadow-light));
  background-color: var(--current-polar);
}

button:hover {
  cursor: pointer;
  color: var(--current-color);
  background-color: inherit;
  box-shadow: var(--current-shadow);
}

button:active {
  border: var(--border-width) solid var(--current-gray);
}

button.outline {
  color: inherit;
  background-color: inherit;
  border: var(--border-width) solid var(--current-color);
}

button.outline:hover {
  background-color: var(--current-bg-contrast);
}

button.outline:active {
  color: inherit;
  background-color: inherit;
  border: var(--border-width) solid var(--current-color);
}

button:disabled {
  opacity: 0.65;
}

button:disabled:hover {
  opacity: 0.85;
}

button.primary {
  color: var(--current-color-contrast);
  border-color: var(--current-primary);
  background-color: var(--current-primary);
}

button.outline.primary {
  color: var(--current-primary);
  background-color: inherit;
  border-color: var(--current-primary);
}

button.primary:not(.bare):not([aria-pressed]):not(:disabled):hover,
button.primary.outline:not(.bare):not([aria-pressed]):not(:disabled):hover {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
}

button.primary:not(.bare):not([aria-pressed]):not(:disabled):active,
button.primary.outline:not(.bare):not([aria-pressed]):not(:disabled):active {
  color: var(--color-dark);
  background-color: var(--current-primary-lighter);
}

button.accent {
  color: var(--color-light);
  border-color: var(--current-accent);
  background-color: var(--current-accent);
  outline-color: var(--current-accent);
}

button.outline.accent {
  color: var(--current-accent);
  border-color: var(--current-accent);
  background-color: inherit;
}

button.accent:not(:disabled):hover,
.outline.accent:not(:disabled):hover {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
  border-color: var(--current-accent);
}

button.accent:not(:disabled):active,
.outline.accent:not(:disabled):active {
  color: var(--color-dark);
  background-color: var(--current-accent-lighter);
}

button.highlight {
  border-color: var(--current-highlight);
  background-color: var(--current-highlight);
  color: var(--color-dark);
  outline-color: var(--current-highlight);
}

button.outline.highlight {
  color: var(--current-highlight-dark);
  background-color: inherit;
  border-color: var(--current-highlight-dark);
}

button.highlight:not(:disabled):hover,
button.outline.highlight:not(:disabled):hover {
  color: var(--color-dark);
  background-color: var(--current-highlight-light);
  border-color: var(--current-highlight);
}

button.highlight:not(:disabled):active,
button.outline.highlight:not(:disabled):active {
  color: var(--color-dark);
  background-color: var(--current-highlight-lighter);
}

button.bare {
  font-size: var(--current-font-size);
  font-family: var(--font-family-ui);
  font-weight: var(--font-weight-ui);
  color: var(--current-color);
  background-color: inherit;
  border-color: transparent;
  padding: var(--current-size);
}

button.bare:hover {
  background-color: var(--current-gray);
}

.bare.primary:hover {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
}

.bare.primary,
.bare.primary:active {
  color: var(--current-primary);
  background-color: unset;
}

.bare.accent:hover {
  color: var(--current-dark);
  background-color: var(--current-accent-light);
}

.bare.accent,
.bare.accent:active {
  color: var(--current-accent);
}

.bare.highlight:hover {
  color: var(--color-dark);
  background-color: var(--current-highlight-lighter);
}

.bare.highlight,
.bare.highlight:active {
  color: var(--current-highlight-dark);
}

[aria-pressed=false]:hover {
  box-shadow: var(--current-shadow);
}

[aria-pressed=true] {
  color: var(--current-color);
  background-color: var(--current-bg-contrast);
  box-shadow: var(--shadow-inset);
}

[aria-pressed=false]:hover {
  background-color: var(--current-bg-color);
}

[aria-pressed=false]:active {
  background-color: var(--current-gray);
}

[aria-pressed=true] {
  border-color: var(--current-gray);
  background-color: var(--current-gray);
}

[aria-pressed=true]:hover {
  background-color: var(--current-gray);
}

[aria-pressed=true]:active {
  background-color: var(--current-bg-contrast);
}

.outline[aria-pressed=false] {
  border-color: var(--current-color);
}

.outline[aria-pressed=true] {
  border-color: var(--current-color);
  background-color: var(--current-bg-contrast);
}

.primary[aria-pressed=false] {
  color: var(--current-color-contrast);
  background-color: var(--current-primary);
}

.primary.outline[aria-pressed=false] {
  color: var(--current-primary);
  background-color: inherit;
}

button.primary[aria-pressed=false]:hover,
.primary.outline[aria-pressed=false]:hover {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
}

.primary[aria-pressed=false]:active,
.primary.outline[aria-pressed=false]:active {
  color: var(--current-primary);
  background-color: var(--current-primary-lighter);
}

button.primary[aria-pressed=true],
button.primary.outline[aria-pressed=true] {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
  border-color: var(--current-primary-light);
}

button.primary.outline[aria-pressed=true] {
  border-color: var(--current-primary);
}

button.primary[aria-pressed=true]:hover,
button.primary.outline[aria-pressed=true]:hover {
  color: var(--current-primary);
  background-color: var(--current-primary-lighter);
}

button.primary[aria-pressed=true]:active,
button.primary.outline[aria-pressed=true]:active {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
}

.accent[aria-pressed=false] {
  color: var(--color-light);
  background-color: var(--current-accent);
}

.accent.outline[aria-pressed=false] {
  background-color: inherit;
}

button.accent[aria-pressed=false]:hover,
button.accent.outline[aria-pressed=false]:hover {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}

.accent[aria-pressed=false]:active,
button.accent.outline[aria-pressed=false]:active {
  color: var(--current-dark);
  background-color: var(--current-accent-lighter);
}

.accent[aria-pressed=true],
.accent.outline[aria-pressed=true] {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}

button.accent[aria-pressed=true]:hover,
button.accent.outline[aria-pressed=true]:hover {
  color: var(--current-accent);
  background-color: var(--current-accent-lighter);
}

.accent[aria-pressed=true]:active,
.accent.outline[aria-pressed=true]:active {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}

.highlight[aria-pressed=false] {
  color: var(--color-dark);
  background-color: var(--current-highlight);
}

.highlight.outline[aria-pressed=false] {
  color: var(--current-highlight-dark);
  background-color: inherit;
}

button.highlight[aria-pressed=false]:hover,
button.highlight.outline[aria-pressed=false]:hover {
  color: var(--color-dark);
  background-color: var(--current-highlight-light);
}

.highlight[aria-pressed=false]:active,
.highlight.outline[aria-pressed=false]:active {
  background-color: var(--current-highlight-lighter);
}

.highlight[aria-pressed=true],
.outline.highlight[aria-pressed=true] {
  color: var(--color-dark);
  background-color: var(--current-highlight-light);
}

button.highlight[aria-pressed=true]:hover,
button.highlight.outline[aria-pressed=true]:hover {
  color: var(--color-dark);
  background-color: var(--current-highlight-lighter);
}

.highlight[aria-pressed=true]:active,
.highlight.outline[aria-pressed=true]:active {
  background-color: var(--current-highlight-light);
}

.bare[aria-pressed=false] {
  color: var(--current-color);
  background-color: inherit;
  border-color: transparent;
}

.bare[aria-pressed=false]:hover {
  background-color: var(--current-gray);
}

.bare[aria-pressed=false]:active {
  color: var(--current-color);
  background-color: var(--current-bg-contrast);
}

.bare[aria-pressed=true] {
  background-color: inherit;
}

.bare[aria-pressed=true]:hover {
  background-color: var(--current-gray);
}

.bare[aria-pressed=true]:active {
  color: var(--current-color);
  background-color: inherit;
}

.bare.primary[aria-pressed=false] {
  color: var(--current-primary);
  background-color: inherit;
}

.bare.primary[aria-pressed=false]:hover {
  color: var(--color-primary);
  background-color: var(--current-primary-lighter);
}

.bare.primary[aria-pressed=false]:active {
  color: var(--color-dark);
  background-color: var(--color-primary-lighter);
}

.bare.primary[aria-pressed=true] {
  color: var(--color-primary);
  background-color: var(--current-primary-lighter);
}

.bare.primary[aria-pressed=true]:hover {
  color: var(--color-dark);
  background-color: var(--color-primary-light);
}

.bare.primary[aria-pressed=true]:active {
  color: var(--color-dark);
  background-color: var(--color-primary-lighter);
}

.bare.accent[aria-pressed=false] {
  color: var(--current-accent);
  background-color: inherit;
}

.bare.accent[aria-pressed=false]:hover {
  background-color: var(--current-accent-lighter);
}

.bare.accent[aria-pressed=false]:active {
  color: var(--color-dark);
  background-color: var(--current-accent-lighter);
}

.bare.accent[aria-pressed=true] {
  color: var(--color-accent);
  background-color: var(--current-accent-lighter);
}

.bare.accent[aria-pressed=true]:hover {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}

.bare.accent[aria-pressed=true]:active {
  color: var(--color-dark);
  background-color: var(--current-accent-lighter);
}

.bare.highlight[aria-pressed=false] {
  color: var(--current-highlight-dark);
  background-color: inherit;
}

.bare.highlight[aria-pressed=false]:hover {
  background-color: var(--current-highlight-lighter);
}

.bare.highlight[aria-pressed=false]:active {
  background-color: var(--current-highlight-lighter);
}

.bare.highlight[aria-pressed=true] {
  background-color: var(--current-highlight-lighter);
}

.bare.highlight[aria-pressed=true]:hover {
  color: var(--color-dark);
  background-color: var(--current-highlight-light);
}

.bare.highlight[aria-pressed=true]:active {
  color: var(--color-dark);
  background-color: var(--current-highlight-lighter);
}

.start > button {
  text-align: start;
}

.end > button {
  text-align: end;
}

fieldset {
  border-radius: var(--radius-base);
  border: 1px solid var(--current-gray);
}
fieldset > legend {
  font-size: var(--font-size-ui);
  font-weight: var(--font-weight-ui);
}
fieldset > p {
  font-size: var(--font-size-small);
  font-weight: var(--font-weight-ui);
}

fieldset {
  padding: 0 var(--current-size-plus) var(--current-size-plus);
}
fieldset > * + * {
  margin-block-start: var(--current-size);
}

form * {
  font-family: var(--font-family-ui);
}

label,
.feedback {
  display: block;
}

label,
legend,
.form\:element {
  font-weight: var(--font-weight-ui);
  padding-inline-start: 0;
  padding-inline-end: 0;
  background-color: inherit;
}

.input-group {
  width: auto;
}

.input-group label {
  display: flex;
  justify-content: space-between;
}

input,
select,
textarea {
  border: 1px solid var(--color-gray-1);
  border-radius: var(--radius-base);
  color: var(--color-dark);
  background: var(--color-white);
}

label > input {
  max-width: 100%;
}

* + .feedback {
  margin-block-start: calc(var(--outline-offset) + 2px);
}

[disabled] {
  color: var(--color-gray-1);
  cursor: not-allowed;
}

.primary input,
.primary select,
.primary textarea {
  accent-color: var(--current-primary);
}

.accent input,
.accent select,
.accent textarea {
  accent-color: var(--current-accent);
}

.highlight input,
.highlight select,
.highlight textarea {
  accent-color: var(--current-highlight);
}

legend {
  font-size: var(--current-font-size);
  margin-block-end: var(--current-size);
}

input,
select,
textarea {
  font-size: var(--current-font-size);
  padding: var(--current-size) var(--current-size-plus);
}

label {
  font-size: var(--current-font-size);
}

label > [type=file] {
  color: var(--color-dark);
  font-size: var(--current-font-size-minus);
  padding: var(--current-size) var(--current-size) var(--current-size-minus);
  display: flex;
  align-items: center;
}

.feedback {
  font-size: var(--current-font-size-minus);
  min-height: calc(var(--current-font-size-minus) * var(--ratio));
}

table {
  max-width: 100%;
  overflow-y: auto;
  border-collapse: collapse;
  font-family: var(--font-family-ui);
  line-height: var(--line-height-ui);
}

th {
  padding: var(--current-size) var(--current-size-plus);
  background-color: var(--current-bg-contrast);
  text-align: center;
}

td {
  padding: calc(var(--current-size) / var(--ratio)) calc(var(--current-size-plus) / var(--ratio));
  border: 1px solid var(--current-bg-contrast);
}

tr:hover td {
  background-color: var(--current-primary-lightest);
}

.output.active::before,
.output.error::before,
.output.success::before {
  display: none;
}

.output::before {
  align-self: center;
  content: "🥁";
  font-size: 18em;
  line-height: 1;
  opacity: 0.15;
  transition: opacity 0.3s ease-in;
}

.output.focus::before {
  opacity: 1;
}

.emoji {
  font-size: 5vw;
  opacity: 0.6;
  position: absolute;
  z-index: -1;
}

details > summary {
  cursor: pointer;
  display: block;
  color: var(--color-light);
  font-weight: var(--font-weight-ui);
  border: var(--border-width) solid var(--current-border-color);
  padding: var(--current-size-minus);
  max-width: 100%;
}

details > summary:hover {
  box-shadow: var(--current-shadow);
}

.night summary {
  color: var(--color-dark);
}

details > summary {
  background-color: var(--current-color);
  margin-block-end: var(--current-size-plus);
}

details > summary > h1,
details > summary > h2,
details > summary > h3,
details > summary > h4 {
  display: inline-block;
}

details > summary::before {
  content: "👉";
  margin-inline-end: var(--s-1);
}

details[open] > summary {
  color: var(--current-color);
  background-color: var(--current-bg-contrast);
  border: var(--border-width) solid var(--current-border-color);
}

.night details[open] > summary {
  color: var(--color-light);
}

.night.blend details[open] > summary {
  color: var(--color-light);
  background-color: var(--current-polar);
}

.day.contrast details[open] > summary {
  color: var(--color-dark);
}

details[open] > summary::before {
  content: "👇";
  margin-inline-end: var(--s-1);
}

.night details[open] > summary.bg\:primary,
.day details[open] > summary.bg\:primary {
  color: var(--color-dark);
  background-color: var(--current-primary-light);
}
.night details[open] > summary.bg\:accent,
.day details[open] > summary.bg\:accent {
  color: var(--color-dark);
  background-color: var(--current-accent-light);
}
.night details[open] > summary.bg\:highlight,
.day details[open] > summary.bg\:highlight {
  color: var(--color-dark);
  background-color: var(--current-highlight-light);
}

.l\:burrito\:xxs summary {
  inline-size: var(--sidebar-width-xxs);
}

.l\:burrito\:xs summary {
  inline-size: var(--sidebar-width-xs);
}

.l\:burrito\:sm summary {
  inline-size: var(--sidebar-width-sm);
}

.l\:burrito\:md summary {
  inline-size: var(--sidebar-width-md);
}

.l\:burrito\:lg summary {
  inline-size: var(--sidebar-width-lg);
}

.l\:burrito\:xl summary {
  inline-size: var(--sidebar-width-xl);
}

.l\:burrito\:xxl summary {
  inline-size: var(--sidebar-width-xxl);
}

.ui\:element {
  min-block-size: var(--sidebar-width-md);
}

/* CSS motion (animations, transitions, user-initiated movement) */
/* Layout */
/* Overrides */
.hide\:rm-node {
  display: none;
}

.hide\:sr-never {
  visibility: hidden;
}

.hide\:sr-always,
.hide\:viz-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
  transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);
}

.unhide {
  border: unset;
  clip: unset;
  height: auto;
  margin: initial;
  overflow: hidden;
  padding: var(--current-size);
  position: unset;
  top: 0;
  width: 100%;
  white-space: normal;
}

.unselectable {
  -webkit-user-select: none; /* Safari */ /* IE 10+ */
  -moz-user-select: none;
       user-select: none;
}

.copy-text {
  -webkit-user-select: text;
  -moz-user-select: text;
       user-select: text;
}