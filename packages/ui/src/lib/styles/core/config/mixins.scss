@use 'sass:map';

//== CSS VARS

/**
 * src https://dev.to/felipperegazio/css-custom-properties-vars-with-sass-scss-a-practical-architecture-strategy-1m88
 * Use this mixin to declare a set of CSS Custom Properties.
 * The variables in $design_tokens will be prefixed with the given $theme-prefix
 * You can use this mixin to output different global designs ("themes") while relying on
 * common core CSS functionality to generate layout, typography, color, etc (using $design_tokens)
 * 
 *
 * Usage:
 * @include generateCssVars((
 *  base-font-size: 65.5%,
 *  font-family: #{"HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif},
 * 
 *  primary-color: #33b5e5,
 *  outline-color: #ff500a,
 * ));
 *
 * Will result in
 *
 * :root {
 *    --prefix-base-font-size: 65.5%,
 *    --prefix-font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif;
 *    --prefix-primary-color:  #33b5e5;
 *    --prefix-outline-color: #ff500a,
 * }
 *
 */

// $current_cssvars holds the CSS variables that have been generated so far. It is initially set to null
$current_cssvars: ();

@mixin generateCssVars($design_tokens, $prefix: $theme-prefix) {
	$current_cssvars: map-merge($current_cssvars, $design_tokens);
	:root {
		@each $name, $value in $design_tokens {
			#{$prefix}-#{$name}: #{$value};
		}
	}
}

@mixin generateModularScale(
	$design_tokens,
	$steps: $modular-scale-steps,
	$prefix: $theme-prefix,
	$breakpoint: $max-breakpoint
) {
	@include generateCssVars($design_tokens, $prefix);
	:root {
		#{$prefix}-fluid-bp: calc(
			calc(var(#{$prefix}-fluid-screen) - calc((var(#{$prefix}-fluid-min-width) / 16) * 1rem)) /
				calc(
					calc(var(#{$prefix}-fluid-max-width) / 16) - calc(var(#{$prefix}-fluid-min-width) / 16)
				)
		);
		#{$prefix}-fluid-min-scale-0: var(#{$prefix}-fluid-min-ratio);
		#{$prefix}-fluid-max-scale-0: var(#{$prefix}-fluid-max-ratio);
		#{$prefix}-fluid-min-size-0: calc(var(#{$prefix}-fluid-min-size) / 16);
		#{$prefix}-fluid-max-size-0: calc(var(#{$prefix}-fluid-max-size) / 16);
		#{$prefix}-fluid-0: calc(
			calc(var(#{$prefix}-fluid-min-size-0) * 1rem) +
				calc(var(#{$prefix}-fluid-max-size-0) - var(#{$prefix}-fluid-min-size-0)) *
				var(#{$prefix}-fluid-bp)
		);
	}

	@each $step in $steps {
		$previous-step: calc($step - 1);
		:root {
			#{$prefix}-fluid-min-scale-#{$step}: calc(
				var(#{$prefix}-fluid-min-scale-#{$previous-step}) * var(#{$prefix}-fluid-min-ratio)
			);
			#{$prefix}-fluid-max-scale-#{$step}: calc(
				var(#{$prefix}-fluid-max-scale-#{$previous-step}) * var(#{$prefix}-fluid-max-ratio)
			);
			#{$prefix}-fluid-min-size-#{$step}: calc(
				calc(var(#{$prefix}-fluid-min-size) * var(#{$prefix}-fluid-min-scale-#{$previous-step})) /
					16
			);
			#{$prefix}-fluid-max-size-#{$step}: calc(
				calc(var(#{$prefix}-fluid-max-size) * var(#{$prefix}-fluid-max-scale-#{$previous-step})) /
					16
			);
			#{$prefix}-fluid-#{$step}: calc(
				calc(var(#{$prefix}-fluid-min-size-#{$step}) * 1rem) +
					calc(var(#{$prefix}-fluid-max-size-#{$step}) - var(#{$prefix}-fluid-min-size-#{$step})) *
					var(#{$prefix}-fluid-bp)
			);
		}
	}
	@include min-width(#{$breakpoint}) {
		:root {
			#{$prefix}-fluid-screen: calc(
				var(#{$prefix}-fluid-max-width) * 1px
			); // adds px unit to unitless value
		}
	}
}

/**
* Attempting this:
* - https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
* - https://utopia.fyi/blog/clamp
* It can probably be improved with better usage of sass syntax
*/
@mixin generateTypographicScale(
	$design_tokens,
	$prefix: $theme-prefix,
	$steps-plus: $modular-scale-steps-plus,
	$steps-minus: $modular-scale-steps-minus,
	$min-breakpoint: $min-breakpoint,
	$max-breakpoint: $max-breakpoint
) {
	@include generateCssVars($design_tokens, $prefix);
	$width-min: calc(var(#{$prefix}-fluid-min-width) / 16);
	$width-max: calc(var(#{$prefix}-fluid-max-width) / 16);
	$size-min: calc(var(#{$prefix}-fluid-min-size) / 16); // Min font size
	$size-max: calc(var(#{$prefix}-fluid-max-size) / 16); // Max font size
	$width-neg: calc(-1 * $width-min); // Precalc
	$fluid-width: calc($width-max - $width-min); // Precalc
	$slope: calc(calc($size-max - $size-min) / calc($width-max - $width-min));
	$y-axis: calc(calc(-1 * $width-min) * $slope + $size-min);
	:root {
		#{$prefix}-f-slope: $slope;
		#{$prefix}-f-y-axis: $y-axis;
		#{$prefix}-f-size-min-0: $size-max;
		#{$prefix}-f-size-max-0: $size-min;
		#{$prefix}-fluid-0: clamp($size-min * 1rem, $y-axis * 1rem + $slope * 100vw, $size-max * 1rem);
	}

	@each $step in $steps-plus {
		$previous-step: calc($step - 1);
		:root {
			#{$prefix}-f-size-min-#{$step}: calc(
				var(#{$prefix}-f-size-min-#{$previous-step}) * var(#{$prefix}-fluid-min-ratio)
			);
			#{$prefix}-f-size-max-#{$step}: calc(
				var(#{$prefix}-f-size-max-#{$previous-step}) * var(#{$prefix}-fluid-max-ratio)
			);
			#{$prefix}-f-width-neg-#{$step}: calc(-1 * var(#{$prefix}-f-size-min-#{$step}));
			#{$prefix}-y-axis-#{$step}: calc(
				var(#{$prefix}-f-width-neg-#{$step}) * $slope + var(#{$prefix}-f-size-min-#{$step})
			);
			#{$prefix}-fluid-#{$step}: clamp(
				var(#{$prefix}-f-size-min-#{$step}) * 1rem,
				var(#{$prefix}-y-axis-#{$step}) * 1rem + $slope * 100vw,
				var(#{$prefix}-f-size-max-#{$step}) * 1rem
			);
		}
	}
	@each $step in $steps-minus {
		$previous-step: calc($step + 1);
		:root {
			#{$prefix}-f-size-min-#{$step}: calc(
				var(#{$prefix}-f-size-min-#{$previous-step}) / var(#{$prefix}-fluid-min-ratio)
			);
			#{$prefix}-f-size-max-#{$step}: calc(
				var(#{$prefix}-f-size-max-#{$previous-step}) / var(#{$prefix}-fluid-max-ratio)
			);
			#{$prefix}-f-width-neg-#{$step}: calc(-1 * var(#{$prefix}-f-size-min-#{$step}));
			#{$prefix}-y-axis-#{$step}: calc(
				var(#{$prefix}-f-width-neg-#{$step}) * $slope + var(#{$prefix}-f-size-min-#{$step})
			);
			#{$prefix}-fluid-#{$step}: clamp(
				var(#{$prefix}-f-size-min-#{$step}) * 1rem,
				var(#{$prefix}-y-axis-#{$step}) * 1rem + $slope * 100vw,
				var(#{$prefix}-f-size-max-#{$step}) * 1rem
			);
		}
	}
}

@mixin theme-main($theme-prefix) {
	@include generateCssVars($breakpoints, $theme-prefix);

	// WIP - still experimenting with scale
	@include generateCssVars($scale-space-pairs, $theme-prefix);
	@include generateCssVars($size-scale, $theme-prefix);
	@include generateTypographicScale(
		$modular-scale,
		$theme-prefix,
		$modular-scale-steps-plus,
		$modular-scale-steps-minus,
		bp-xs,
		bp-xl
	);
	// -----------

	@include generateCssVars($layout, $theme-prefix);
	@include generateCssVars($typography, $theme-prefix);
	@include generateCssVars($colors, $theme-prefix);
}

//== MEDIA QUERIES

@mixin min-width($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		@media screen and (min-width: '#{$breakpoint-value}px') {
			@content;
		}
	} @else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

@mixin max-width($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		@media screen and (max-width: '#{$breakpoint-value}px') {
			@content;
		}
	} @else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}
